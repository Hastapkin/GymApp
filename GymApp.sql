-- Xóa tất cả để làm sạch
BEGIN
    EXECUTE IMMEDIATE 'DROP TABLE CheckInLog CASCADE CONSTRAINTS';
    EXECUTE IMMEDIATE 'DROP VIEW V_MemberInfo';
    EXECUTE IMMEDIATE 'DROP TABLE MembershipCards CASCADE CONSTRAINTS';
    EXECUTE IMMEDIATE 'DROP TABLE Members CASCADE CONSTRAINTS';
    EXECUTE IMMEDIATE 'DROP TABLE Staff CASCADE CONSTRAINTS';
    EXECUTE IMMEDIATE 'DROP TABLE Packages CASCADE CONSTRAINTS';
EXCEPTION
    WHEN OTHERS THEN NULL;
END;
/

-- Bảng Members (Thành viên)
CREATE TABLE Members (
    Id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    FullName NVARCHAR2(100) NOT NULL,
    Phone NVARCHAR2(20),
    Email NVARCHAR2(100),
    Gender NVARCHAR2(10) CHECK (Gender IN ('Nam', 'Nữ', 'Khác')),
    DateOfBirth DATE,
    Address NVARCHAR2(200),
    JoinDate DATE DEFAULT SYSDATE,
    IsActive NUMBER(1) DEFAULT 1 CHECK (IsActive IN (0,1)),
    Notes NVARCHAR2(500),
    CreatedDate DATE DEFAULT SYSDATE,
    UpdatedDate DATE DEFAULT SYSDATE
);

-- Bảng Packages (Gói tập)
CREATE TABLE Packages (
    Id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    PackageName NVARCHAR2(100) NOT NULL,
    Description NVARCHAR2(500),
    DurationDays NUMBER NOT NULL,
    Price NUMBER(10,2) NOT NULL,
    IsActive NUMBER(1) DEFAULT 1 CHECK (IsActive IN (0,1)),
    CreatedDate DATE DEFAULT SYSDATE
);

-- Bảng MembershipCards (Thẻ tập)
CREATE TABLE MembershipCards (
    Id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    MemberId NUMBER NOT NULL,
    PackageId NUMBER NOT NULL,
    StartDate DATE NOT NULL,
    EndDate DATE NOT NULL,
    Price NUMBER(10,2) NOT NULL,
    PaymentMethod NVARCHAR2(50) DEFAULT 'Tiền mặt',
    Status NVARCHAR2(20) DEFAULT 'Hoạt động' CHECK (Status IN ('Hoạt động', 'Hết hạn', 'Tạm ngưng')),
    Notes NVARCHAR2(500),
    CreatedDate DATE DEFAULT SYSDATE,
    CreatedBy NVARCHAR2(50) DEFAULT 'Admin',
    CONSTRAINT FK_MemberId FOREIGN KEY (MemberId) REFERENCES Members(Id) ON DELETE CASCADE,
    CONSTRAINT FK_PackageId FOREIGN KEY (PackageId) REFERENCES Packages(Id)
);

-- Bảng Staff (Nhân viên)
CREATE TABLE Staff (
    Id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    FullName NVARCHAR2(100) NOT NULL,
    Phone NVARCHAR2(20),
    Email NVARCHAR2(100),
    Role NVARCHAR2(50) NOT NULL CHECK (Role IN ('Lao công', 'Thu ngân', 'Quản lý', 'Huấn luyện viên')),
    StartDate DATE DEFAULT SYSDATE,
    Salary NUMBER(10,2) DEFAULT 0,
    Address NVARCHAR2(200),
    IsActive NUMBER(1) DEFAULT 1 CHECK (IsActive IN (0,1)),
    Notes NVARCHAR2(500),
    CreatedDate DATE DEFAULT SYSDATE
);

-- Bảng CheckInLog (Lịch sử check-in)
CREATE TABLE CheckInLog (
    Id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    MemberId NUMBER NOT NULL,
    CheckInTime DATE DEFAULT SYSDATE,
    CheckOutTime DATE,
    Notes NVARCHAR2(200),
    CONSTRAINT FK_CheckIn_MemberId FOREIGN KEY (MemberId) REFERENCES Members(Id)
);

-- =============================================
-- TẠO INDEX Y HỆT NHƯ CŨ
-- =============================================

-- Index cho tìm kiếm nhanh
CREATE INDEX IDX_Members_FullName ON Members(FullName);
CREATE INDEX IDX_Members_Phone ON Members(Phone);
CREATE INDEX IDX_MembershipCards_MemberId ON MembershipCards(MemberId);
CREATE INDEX IDX_MembershipCards_EndDate ON MembershipCards(EndDate);
CREATE INDEX IDX_CheckInLog_MemberId ON CheckInLog(MemberId);
CREATE INDEX IDX_CheckInLog_CheckInTime ON CheckInLog(CheckInTime);

-- Thêm gói tập mẫu
INSERT INTO Packages (PackageName, Description, DurationDays, Price) VALUES 
('Gói 1 tháng', 'Gói tập cơ bản 1 tháng', 30, 500000);

INSERT INTO Packages (PackageName, Description, DurationDays, Price) VALUES 
('Gói 3 tháng', 'Gói tập 3 tháng tiết kiệm', 90, 1400000);

INSERT INTO Packages (PackageName, Description, DurationDays, Price) VALUES 
('Gói 6 tháng', 'Gói tập 6 tháng ưu đãi', 180, 2700000);

INSERT INTO Packages (PackageName, Description, DurationDays, Price) VALUES 
('Gói 1 năm', 'Gói tập 1 năm VIP', 365, 5000000);

-- Thêm nhân viên mẫu
INSERT INTO Staff (FullName, Phone, Role, Salary, Address) VALUES 
('Nguyễn Thị Lan', '0987654321', 'Lao công', 8000000, 'Hà Nội');

INSERT INTO Staff (FullName, Phone, Role, Salary, Address) VALUES 
('Trần Văn Nam', '0123456789', 'Thu ngân', 12000000, 'Hà Nội');

-- Thêm thành viên mẫu
INSERT INTO Members (FullName, Phone, Email, Gender, DateOfBirth, Address) VALUES 
('Lê Minh Tuấn', '0901234567', 'tuan@email.com', 'Nam', DATE '1990-05-15', 'Cầu Giấy, Hà Nội');

INSERT INTO Members (FullName, Phone, Email, Gender, DateOfBirth, Address) VALUES 
('Phạm Thị Hoa', '0912345678', 'hoa@email.com', 'Nữ', DATE '1995-08-20', 'Thanh Xuân, Hà Nội');

INSERT INTO Members (FullName, Phone, Email, Gender, DateOfBirth, Address) VALUES 
('Hoàng Văn Đức', '0923456789', 'duc@email.com', 'Nam', DATE '1988-12-10', 'Đống Đa, Hà Nội');

INSERT INTO Members (FullName, Phone, Email, Gender, DateOfBirth, Address) VALUES 
('Nguyễn Thị Mai', '0934567890', 'mai@email.com', 'Nữ', DATE '1992-03-25', 'Ba Đình, Hà Nội');

INSERT INTO Members (FullName, Phone, Email, Gender, DateOfBirth, Address) VALUES 
('Vũ Minh Hải', '0945678901', 'hai@email.com', 'Nam', DATE '1985-07-08', 'Hoàn Kiếm, Hà Nội');

-- Thêm thẻ tập mẫu
INSERT INTO MembershipCards (MemberId, PackageId, StartDate, EndDate, Price, PaymentMethod) VALUES 
(1, 2, DATE '2024-01-15', DATE '2024-04-15', 1400000, 'Tiền mặt');

INSERT INTO MembershipCards (MemberId, PackageId, StartDate, EndDate, Price, PaymentMethod) VALUES 
(2, 1, DATE '2024-02-01', DATE '2024-03-01', 500000, 'Chuyển khoản');

INSERT INTO MembershipCards (MemberId, PackageId, StartDate, EndDate, Price, PaymentMethod) VALUES 
(3, 3, DATE '2024-01-01', DATE '2024-07-01', 2700000, 'Tiền mặt');

INSERT INTO MembershipCards (MemberId, PackageId, StartDate, EndDate, Price, PaymentMethod) VALUES 
(4, 1, DATE '2024-02-15', DATE '2024-03-15', 500000, 'Tiền mặt');

INSERT INTO MembershipCards (MemberId, PackageId, StartDate, EndDate, Price, PaymentMethod) VALUES 
(5, 4, DATE '2024-01-01', DATE '2024-12-31', 5000000, 'Chuyển khoản');

-- Thêm lịch sử check-in mẫu
INSERT INTO CheckInLog (MemberId, CheckInTime) VALUES 
(1, SYSDATE - 2);

INSERT INTO CheckInLog (MemberId, CheckInTime) VALUES 
(2, SYSDATE - 1);

INSERT INTO CheckInLog (MemberId, CheckInTime) VALUES 
(3, SYSDATE);

-- Reset identity sequences để tránh conflict
ALTER TABLE Members MODIFY Id GENERATED BY DEFAULT ON NULL AS IDENTITY (START WITH LIMIT VALUE);
ALTER TABLE Packages MODIFY Id GENERATED BY DEFAULT ON NULL AS IDENTITY (START WITH LIMIT VALUE);
ALTER TABLE Staff MODIFY Id GENERATED BY DEFAULT ON NULL AS IDENTITY (START WITH LIMIT VALUE);
ALTER TABLE MembershipCards MODIFY Id GENERATED BY DEFAULT ON NULL AS IDENTITY (START WITH LIMIT VALUE);

COMMIT;

-- Verify all working
SELECT 'DATABASE RESTORED SUCCESSFULLY!' as MESSAGE FROM dual;
SELECT 'Tổng số thành viên: ' || COUNT(*) as MEMBERS_COUNT FROM Members;
SELECT 'Tổng số nhân viên: ' || COUNT(*) as STAFF_COUNT FROM Staff;
SELECT 'Tổng số gói tập: ' || COUNT(*) as PACKAGES_COUNT FROM Packages;
SELECT 'Tổng số thẻ tập: ' || COUNT(*) as CARDS_COUNT FROM MembershipCards;

SELECT * FROM Members ORDER BY Id ASC;
SELECT * FROM Packages ORDER BY Id ASC;
SELECT * FROM Staff ORDER BY Id ASC;
SELECT * FROM MembershipCards ORDER BY Id ASC;
SELECT * FROM CheckInLog ORDER BY Id ASC;
SELECT * FROM V_MemberInfo ORDER BY Id ASC;

DROP VIEW V_MemberInfo;

-- View cần lấy thẻ tập mới nhất của mỗi member
CREATE VIEW V_MemberInfo AS
SELECT 
    m.Id,
    m.FullName,
    m.Phone,
    m.Email,
    m.Gender,
    m.JoinDate,
    mc.StartDate,
    mc.EndDate,
    p.PackageName,
    mc.Price,
    mc.Status,
    CASE 
        WHEN mc.EndDate >= SYSDATE THEN 'Còn hạn'
        ELSE 'Hết hạn'
    END as MembershipStatus,
    TRUNC(mc.EndDate - SYSDATE) as DaysRemaining
FROM Members m
LEFT JOIN (
    -- ✅ Lấy thẻ tập mới nhất của mỗi member
    SELECT mc1.*
    FROM MembershipCards mc1
    INNER JOIN (
        SELECT MemberId, MAX(Id) as MaxId
        FROM MembershipCards
        GROUP BY MemberId
    ) mc2 ON mc1.MemberId = mc2.MemberId AND mc1.Id = mc2.MaxId
) mc ON m.Id = mc.MemberId
LEFT JOIN Packages p ON mc.PackageId = p.Id
WHERE m.IsActive = 1;